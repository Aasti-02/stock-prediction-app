{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fa58438b-ef07-48b5-b43c-56190e79685c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-31 15:56:15.427 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\priya\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-05-31 15:56:15.431 No runtime found, using MemoryCacheStorageManager\n",
      "2025-05-31 15:56:15.433 No runtime found, using MemoryCacheStorageManager\n",
      "2025-05-31 15:56:15.973 Session state does not function when running a script without `streamlit run`\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "# Set page title\n",
    "st.title(\"Stock Price Prediction for AAPL, MSFT, NFLX, and GOOG\")\n",
    "\n",
    "# Load the dataset\n",
    "@st.cache_data\n",
    "def load_data():\n",
    "    df = pd.read_csv('stocks.csv')\n",
    "    # Add features for all companies\n",
    "    df['MA10'] = df.groupby('Ticker')['Close'].rolling(window=10).mean().reset_index(0, drop=True)\n",
    "    df['Return'] = df.groupby('Ticker')['Close'].pct_change()\n",
    "    df = df.dropna()\n",
    "    return df\n",
    "\n",
    "# Function to create features\n",
    "def create_features(data, N):\n",
    "    X, y = [], []\n",
    "    for i in range(N, len(data)):\n",
    "        X.append(np.concatenate([\n",
    "            data['Close'].values[i-N:i],\n",
    "            data['MA10'].values[i-N:i],\n",
    "            data['Return'].values[i-N:i]\n",
    "        ]))\n",
    "        y.append(data['Close'].values[i])\n",
    "    return np.array(X), np.array(y)\n",
    "\n",
    "# Load data\n",
    "df = load_data()\n",
    "\n",
    "# Train models for each company\n",
    "models = {}\n",
    "tickers = ['AAPL', 'MSFT', 'NFLX', 'GOOG']\n",
    "for ticker in tickers:\n",
    "    ticker_df = df[df['Ticker'] == ticker].copy()\n",
    "    X, y = create_features(ticker_df, 5)\n",
    "    model = RandomForestRegressor(n_estimators=100, max_depth=10, min_samples_split=2, random_state=42)\n",
    "    model.fit(X, y)\n",
    "    models[ticker] = model\n",
    "\n",
    "# Streamlit app interface\n",
    "st.header(\"Select a Company and Enter Stock Data\")\n",
    "ticker = st.selectbox(\"Choose a company:\", tickers)\n",
    "\n",
    "st.write(f\"Enter the last 5 days of {ticker} stock data (Close, MA10, Return).\")\n",
    "st.write(\"Check the last 5 rows of your dataset for accurate values or use recent data from a finance source.\")\n",
    "\n",
    "col1, col2, col3 = st.columns(3)\n",
    "\n",
    "close_prices = []\n",
    "ma10_values = []\n",
    "returns = []\n",
    "\n",
    "for i in range(5):\n",
    "    with col1:\n",
    "        close = st.number_input(f\"Day {i+1} Close Price\", min_value=0.0, value=100.0, step=0.01, key=f\"close_{ticker}_{i}\")\n",
    "        close_prices.append(close)\n",
    "    with col2:\n",
    "        ma10 = st.number_input(f\"Day {i+1} 10-Day MA\", min_value=0.0, value=100.0, step=0.01, key=f\"ma10_{ticker}_{i}\")\n",
    "        ma10_values.append(ma10)\n",
    "    with col3:\n",
    "        ret = st.number_input(f\"Day {i+1} Daily Return\", value=0.0, step=0.001, key=f\"return_{ticker}_{i}\")\n",
    "        returns.append(ret)\n",
    "\n",
    "# Predict when the user clicks the button\n",
    "if st.button(\"Predict Next Day's Closing Price\", key=f\"predict_{ticker}\"):\n",
    "    # Combine inputs into a feature vector\n",
    "    input_data = np.concatenate([close_prices, ma10_values, returns]).reshape(1, -15)\n",
    "    \n",
    "    # Make prediction\n",
    "    prediction = models[ticker].predict(input_data)\n",
    "    \n",
    "    # Display result\n",
    "    st.success(f\"Predicted {ticker} Closing Price for the next day: ${prediction[0]:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abfdac7f-21b8-4683-ab87-cd3fed4e5a51",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
